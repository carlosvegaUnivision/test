# This is a basic workflow that is manually triggered
name: Run Regresion
on:
  workflow_call:
    inputs:
      environmentID:
        default: "default"
        required: false
        type: string

jobs:
  add-comment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Node.js
        uses: actions/setup-node@v2.4.0
        with:
          node-version: '18.x'
      - name: Test inputs
        run: echo ENV_ID=${{ inputs.environmentID }}
      - name: Add Dependencies
        run: npm i async newman axios
      - name: Add comment
        uses: actions/github-script@v6
        env:
          POSTMAN: ${{ secrets.POSTMAN }}
        with:
          script: |
            const async = require('async')
            const newman = require('newman')
            const axios = require('axios')

            const request = axios.create({
                headers: {
                  'X-Api-Key' : process.env.POSTMAN,
                  'Content-Type': 'application/json'
                  }
                }
            );
            const env = {
                dev: '11642102-e1554fdd-d1ed-42a8-8e22-7ce30537e2b9',
                qa: '11642102-60a27180-1043-4c43-bc78-588b33911b6b',
                stg: '11642102-8ee11349-0bd9-467a-8cea-9624c6e0b05e',
                prod: '11642102-7747d512-f90e-411a-9384-86c47a4df366'

            };
            const remoteCollection = '9766167-b4a6988e-8447-4cec-b938-6673538600cf';
            (async ()=> {
                const hrstart = process.hrtime();
                const {data: {environment: {values: environment}}} = await request.get(`https://api.getpostman.com/environments/${env['qa']}`);
                const {data: {collection: {item: collectionItems, event: [{script: {exec: globalExec}}, {script: {exec: globalTest}}]}}} = await request.get(`https://api.getpostman.com/collections/${remoteCollection}`);
                const commands = collectionItems.map(collection => {
                    const [prerequest, test] = collection.event || [ { listen: 'prerequest', script: {exec: []} }];
                    prerequest.script.exec = [...globalExec, ...globalTest,...prerequest.script.exec];
                    return ((done)=>newman.run({collection:{...collection, ...{event: [prerequest, test]}}, environment, reporters: 'cli', silent: true}, done));
                });

                console.log('Running these Collections in Parallel Process:');
                console.table(collectionItems.map(({name: api})=> ({api})));

                async.parallel(
                    commands,
                    (err, results) => {
                        err && console.error(err);
                        const failuresTable = results.reduce((acc, {collection: {name: url}, run: {failures}}) =>
                          [...acc, ...failures.map(({error: {name, test, message}, source: {name: sourceName}, parent: {name: parentName, items: {members: [{id: linkToTest}]}}})=> ({ref: `${url}<<${parentName}/${sourceName}>>`, error: `${test}, ${name}: ${message}`.substring(0,90), linkToTest: `https://univisiondescarga.postman.co/workspace/6dfa57f7-e2ac-4aa0-9472-c61df72aa565/request/9766167-${linkToTest}`})) ]
                        , []);

                        const headers = ["Referencia 🍎", "Error 🐛", "Link 🔗"];
                        const rows = failuresTable.map(item => [`**${item.ref}**`, item.error, `<a href="${item.linkToTest}" target="_blank">Link</a>`]);
                        const markdownTable = `| ${headers.join(" | ")} |\n|${headers.map(() => "---").join("|")}|\n${rows.map(row => `| ${row.join(" | ")} |`).join("\n")}`;
                        const allTests = results.reduce((acc, {run: {stats}}) => acc+stats.assertions.total,0);
                        const executionTime = `${process.hrtime(hrstart)[0]}s ${process.hrtime(hrstart)[1] / 1000000}ms`;
                        const box = `**Total Tests**: ${allTests}\n**Total Failures**: ${failuresTable.length}\n**Execution Time**: ${executionTime}\n \n<details><summary>Click to check "Regresion Test results"</summary>\n\n${markdownTable}</details>`;
                        const payload = {
                          owner: context.payload.repository.owner.login,
                          repo: context.payload.repository.name,
                          issue_number: context.payload.pull_request.number,
                          body: box
                        }
                        github.rest.issues.createComment(payload)
                    });
            })()
          github-token: ${{ secrets.GITHUB_TOKEN }}